// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package configure

import (
	"github.com/palletone/go-palletone/common/log"
	"github.com/palletone/go-palletone/consensus/consensusconfig"
	"github.com/palletone/go-palletone/dag/coredata"
	"github.com/palletone/go-palletone/dag/dagconfig"
	"github.com/palletone/go-palletone/pan/downloader"
)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Genesis   *coredata.Genesis `toml:",omitempty"`
		ChainId   uint64
		SyncMode  downloader.SyncMode
		Dag       dagconfig.Config
		Log       log.Config
		Consensus consensusconfig.Config
	}
	var enc Config
	enc.Genesis = c.Genesis
	enc.ChainId = c.ChainId
	enc.SyncMode = c.SyncMode
	enc.Dag = c.Dag
	enc.Log = c.Log
	enc.Consensus = c.Consensus
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Genesis   *coredata.Genesis `toml:",omitempty"`
		ChainId   *uint64
		SyncMode  *downloader.SyncMode
		Dag       *dagconfig.Config
		Log       *log.Config
		Consensus *consensusconfig.Config
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Genesis != nil {
		c.Genesis = dec.Genesis
	}
	if dec.ChainId != nil {
		c.ChainId = *dec.ChainId
	}
	if dec.SyncMode != nil {
		c.SyncMode = *dec.SyncMode
	}
	if dec.Dag != nil {
		c.Dag = *dec.Dag
	}
	if dec.Log != nil {
		c.Log = *dec.Log
	}
	if dec.Consensus != nil {
		c.Consensus = *dec.Consensus
	}
	return nil
}
